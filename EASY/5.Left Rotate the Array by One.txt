Problem Statement: 
Given an array of N integers, left rotate the array by one place.

Example 1:

Input: N = 5, array[] = {1,2,3,4,5}
Output: 2,3,4,5,1
Explanation: 
Since all the elements in array will be shifted 
toward left by one so ‘2’ will now become the 
first index and and ‘1’ which was present at 
first index will be shifted at last.


Example 2:
Input: N = 1, array[] = {3}
Output: 3
Explanation: Here only element is present and so 
the element at first index will be shifted to 
last index which is also by the way the first index.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Brute Force Approach: 

Algorithm / Intuition : 

Solution 1: Brute force Approach
Intuition:
The rotated array has just a difference that its first element is present at the last index of the array. So if we can just store the element at the first index and then shift all the elements towards the left and at last put the stored element at the last index. We will get th rotated array.

Approach:

We can take another dummy array of the same length and then shift all elements in the array toward the left and then at the last element store the index of 0th index of the array and print it.

CODE: 

function solve(arr, n) {
  let temp = new Array(n);
  for (let i = 1; i < n; i++) {
    temp[i - 1] = arr[i];
  }
  temp[n - 1] = arr[0];
  for (let i = 0; i < n; i++) {
    console.log(temp[i] + " ");
  }
  console.log();
}

let n = 5;
let arr = [1, 2, 3, 4, 5];
solve(arr, n);


Complexity Analysis :
Time Complexity:
The first for loop runs from i = 1 to i = n-1, which takes O(n-1) or simply O(n) time.
The second for loop runs from i = 0 to i = n-1, which also takes O(n) time.
Therefore, the overall time complexity of the solve function is O(n).

Space Complexity:
The temp array is created with a size of n, so it takes O(n) space.
There are a few constant space variables (like i), but they do not depend on the input size and can be ignored when analyzing asymptotic complexity.
Therefore, the overall space complexity of the solve function is O(n).

In summary, the provided code has a time complexity of O(n) and a space complexity of O(n).
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Optimal Approach : 

Algorithm / Intuition : 

Solution 2:
Approach: 
Here, in the given array :

n = 5,
arr[] = {1,2,3,4,5}
At first, we have to shift the array towards the left so, we store the value of the first index in a variable (let it be x).

Then we iterate the array from the 0th index to the n-1th index(why n-1 i will explain it below)

And then store the value present in the next index to the current index like this :

arr[i] = arr[i+1]
And to prevent its segmentation fault we will iterate it till n-1.

At last, put the value of variable x in the last index of the array.

Complexity Analysis: 

Time Complexity: O(n), as we iterate through the array only once.

Space Complexity: O(1) as no extra space is used