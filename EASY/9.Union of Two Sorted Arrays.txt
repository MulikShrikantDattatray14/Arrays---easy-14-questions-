Problem Statement:
 Given two sorted arrays, arr1, and arr2 of size n and m. Find the union of two sorted arrays.

The union of two arrays can be defined as the common and distinct elements in the two arrays.NOTE: Elements in the union should be in ascending order.

Examples
Example 1:
Input:
n = 5,m = 5.
arr1[] = {1,2,3,4,5}  
arr2[] = {2,3,4,4,5}
Output:
 {1,2,3,4,5}

Explanation: 
Common Elements in arr1 and arr2  are:  2,3,4,5
Distnict Elements in arr1 are : 1
Distnict Elemennts in arr2 are : No distinct elements.
Union of arr1 and arr2 is {1,2,3,4,5} 

Example 2:
Input:
n = 10,m = 7.
arr1[] = {1,2,3,4,5,6,7,8,9,10}
arr2[] = {2,3,4,4,5,11,12}
Output: {1,2,3,4,5,6,7,8,9,10,11,12}
Explanation: 
Common Elements in arr1 and arr2  are:  2,3,4,5
Distnict Elements in arr1 are : 1,6,7,8,9,10
Distnict Elemennts in arr2 are : 11,12
Union of arr1 and arr2 is {1,2,3,4,5,6,7,8,9,10,11,12} 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 1: Using Map
Our aim is to find the common elements in arr1 and arr2, and the distinct elements of arr1,arr2. Use a Single map to find the frequencies of elements in arr1 and arr2.

As we are using only a single map the common element in arr1 and arr2 are treated as a single element for finding frequency, so there would be no duplicates.

 CODE : 
 
function findUnion(arr1, arr2) {
  let freq = new Map();
  let union = [];
  
  for (let num of arr1) {
    freq.set(num, (freq.get(num) || 0) + 1);
  }
  
  for (let num of arr2) {
    freq.set(num, (freq.get(num) || 0) + 1);
  }
  
  for (let [num, count] of freq) {
    union.push(num);
  }
  
  return union;
}

let arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
let arr2 = [2, 3, 4, 4, 5, 11, 12];

let union = findUnion(arr1, arr2);

console.log("Union of arr1 and arr2 is:");
console.log(union.join(" "));

Complexity Analysis : 

Time Complexity:

The first loop iterates over elements in arr1 and updates the frequency map. Let's denote the length of arr1 as m.
The second loop iterates over elements in arr2 and updates the frequency map. Let's denote the length of arr2 as n.
The third loop iterates over the entries in the frequency map to construct the union array.
The time complexity of each loop is O(m), O(n), and O(m + n) respectively. Since these loops are not nested, we can add their complexities. Therefore, the overall time complexity is O(m + n).

Space Complexity:

The freq map is used to store the frequency of elements from both arrays. The maximum size of this map would be the sum of unique elements in arr1 and arr2.
The union array is used to store the unique elements from both arrays.
Let's denote the size of arr1 as m and the size of arr2 as n. The space complexity is O(m + n) for the map and O(m + n) for the union array. Therefore, the overall space complexity is O(m + n).

In summary:

Time Complexity: O(m + n)
Space Complexity: O(m + n)
////////////////////////////////////////////////////////////////////////////////////////

Algorithm / Intuition

Solution 2: Using Set
Suppose we consider arr1 and arr2 as a single array say arr,  then the union of arr1 and arr2 is the distinct elements in arr.

Example:
arr1[] = {1,2,3,4,5,6,7,8,9,10}
arr2[] = {2,3,4,4,5,11,12} 
arr = arr1 + arr2 = {1,2,3,4,5,67,8,9,
                     10,2,3,4,4,5,11,12}

Distinct element in 
arr = {1,2,3,4,5,6,7,8,9,10,11,12} 
    = Union of arr1 ,arr2.
So using a set we can find the distinct elements because the set does not hold any duplicates. Hence we can find the union of arr1 and arr2.

CODE :



function findUnion(arr1, arr2) {
  const set = new Set();
  const union = [];

  for (let num of arr1) {
    set.add(num);
  }

  for (let num of arr2) {
    set.add(num);
  }

  for (let num of set) {
    union.push(num);
  }

  return union;
}

const arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
const arr2 = [2, 3, 4, 4, 5, 11, 12];

const union = findUnion(arr1, arr2);

console.log("Union of arr1 and arr2 is:");
console.log(...union);


Time Complexity:
The first loop iterates over elements in arr1 and adds them to the set. Let's denote the length of arr1 as m.
The second loop iterates over elements in arr2 and adds them to the set. Let's denote the length of arr2 as n.
The third loop iterates over the elements in the set to construct the union array.
The time complexity of each loop is O(m), O(n), and O(m + n) respectively. Since these loops are not nested, we can add their complexities. Therefore, the overall time complexity is O(m + n).

Space Complexity:
The set is used to store the unique elements from both arrays. The maximum size of this set would be the sum of unique elements in arr1 and arr2.
The union array is used to store the unique elements from both arrays.
Let's denote the size of arr1 as m and the size of arr2 as n. The space complexity is O(m + n) for the set and O(m + n) for the union array. Therefore, the overall space complexity is O(m + n).

In summary:

Time Complexity: O(m + n)
Space Complexity: O(m + n)

/////////////////////////////////////////////////////////////////////////////////

Algorithm / Intuition : 

Solution 3: Two Pointers

Solution 1 and 2 work for the unsorted arrays also, The arrays arr1 and arr2 are sorted, can we use this property to reduce the time Complexity?


Approach:

Take two pointers let’s say i,j pointing to the 0th index of arr1 and arr2.
Create an empty vector for storing the union of arr1 and arr2.
From solution 2 we know that the union is nothing but the distinct elements in arr1 + arr2 
Let’s traverse the arr1 and arr2 using pointers i and j and insert the distinct elements found into the union vector.

While traversing we may encounter three cases.

CASE-1 : 

arr1[ i ] == arr2[ j ] 
Here we found a common element, so insert only one element in the union. Let’s insert arr[i] in union and increment i.

NOTE: There may be cases like the element to be inserted is already present in the union, in that case, we are inserting duplicates which is not desired. So while inserting always check whether the last element in the union vector is equal or not to the element to be inserted. If equal we are trying to insert duplicates, so don’t insert the element, else insert the element in the union. This makes sure that we are not inserting any duplicates in the union because we are inserting elements in sorted order.

CASE-2 : 

arr1[ i ]  < arr2[ j ]
arr1[ i ] < arr2[ j ] so we need to insert arr1[ i ] in union.IF last element in  union vector is not equal to arr1[ i ],then insert in union else don’t insert. After checking Increment i.

CASE-3 : 

arr1[ i ] > arr2[ j ]
arr1[ i ] > arr2[ j ] so we need to insert arr2[ j ] in union. IF the last element in the union vector is not equal to arr2[ j ], then insert in the union, else don’t insert. After checking Increment j. After traversing if any elements are left in arr1 or arr2 check for condition and insert in the union.

Complexity Analysis ; 

Time Complexity: O(m+n), Because at max i runs for n times and j runs for m times. When there are no common elements in arr1 and arr2 and all elements in arr1, arr2 are distinct. 

Space Complexity : O(m+n) {If Space of Union ArrayList is considered} 

O(1) {If Space of union ArrayList is not considered}